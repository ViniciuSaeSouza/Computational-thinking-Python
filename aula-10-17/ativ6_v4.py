"""
RM 558832 - MARIA EDUARDA PAIXÃO
RM 558843 - LAURA DE OLIVEIRA CINTRA
RM 554456 - VINICIUS SAES DE SOUZA
"""

import os
import oracledb
import pandas as pd
from datetime import datetime


try:
    conn = oracledb.connect(user="RM554456", password="080995", dsn="oracle.fiap.com.br:1521/ORCL")
    inst_cadastro = conn.cursor()
    inst_consulta = conn.cursor()
except Exception as e:
    conexao = False
else:
    conexao = True
    ano_mes_dia = str(datetime.now().date())
    ano_mes_dia = ano_mes_dia.replace("-", "")
    hora = str(datetime.now().hour) + (str)(datetime.now().minute) + (str)(datetime.now().second)
    dia_hora = ano_mes_dia + hora
    

# Criação da tablea
# inst_cadastro.execute("DROP TABLE petshop")
# inst_cadastro.execute("CREATE TABLE petshop (id INTEGER GENERATED BY DEFAULT AS IDENTITY, tipo_pet VARCHAR(30), nome_pet VARCHAR(50), idade NUMBER)")




# VARIÁVEIS GLOBAIS ----
dados_df = [] # Variável definida para atribuir `pandas.DataFrame`
data_atual = datetime.now()
ano_atual = datetime.now().year


# FUNÇÕES E ROTINAS ----

def cria_dataframe_todas_colunas() -> pd.DataFrame:
    lista_dados = []
    inst_consulta.execute("SELECT * FROM petshop")
    data = inst_consulta.fetchall()

    for dt in data:
        lista_dados.append(dt)

    lista_dados = sorted(lista_dados)

    dados_df = pd.DataFrame.from_records(lista_dados, columns=['Id', 'Tipo', 'Nome', 'Idade', 'Data Nascimento', 'Data Cadastro'])

    return dados_df

def exibe_sub_menu_filtro() -> None:
    print("""
1 - Nome do pet (like)
2 - Idade
3 - Data de Nascimento 
""")

def exibe_sub_menu_number():
    print("""
1 – Igual
2 – Maior que
3 – Menor que
4 – Entre
""")
    
"""
Procedimento: Gera uma planilha com os dados fornecidos pelo usuário
Parâmetro 1: dataframe : pd.DataFrame -> O DataFrame contendo os dados a serem exportados para uma planilha.
Parâmetro 2: nomeArquivo : str -> O nome desejável para a planilha.
Retorno: None
"""
def gerar_planilha(dataframe: pd.DataFrame, nomeArquivo: str) -> None:
    nomeArquivo = nomeArquivo + dia_hora
    dataframe.to_excel(nomeArquivo+".xlsx", index=False)
    print("\n Planilha gerada com sucesso! ")

"""
Procedimento: Exibe os dados de um DataFrame e oferece a opção de gerar uma planilha com esses dados.
Parâmetro 1: dados : pd.DataFrame -> O DataFrame contendo os dados a serem exibidos e, possivelmente, exportados para uma planilha.
Parâmetro 2: nome_arquivo_default : str, opcional -> O nome padrão para o arquivo caso o usuário não forneça um nome específico (padrão: "planilha").
Retorno: None
"""
def exibir_e_gerar_planilha(dados: pd.DataFrame, nome_arquivo_default: str = "planilha"):
    if dados.empty:
        print("\n*** NÃO HÁ DADOS CORRESPONDENTES À SUA PESQUISA ***\n")
    else:
        print("\n", dados)
        planilha = input("Gerar Planilha? [S]im ou [N]ão: ").lower()
        if planilha == "s":
            nome_arq = input("Qual nome deseja para o arquivo? ") or nome_arquivo_default
            gerar_planilha(dados, nome_arq)
        else:
            print("\nOkay, agradecemos!")


"""
Procedimento: Solicita idade desejada ao usuário e faz busca no banco de dados por entradas IGUAIS a fornecida, se encontrar, imprime o `DataFrame`
Parâmetros: none
Retorno: none
"""
def number_igual(tipo_dado:str):
    os.system('cls')
    
    if tipo_dado == "data_nasc":
        texto = "data de nascimento"
    
    print(f"== Filtragem: {tipo_dado} do PET (igual) ==")
    while True:
        idade = int(input("\nBuscar Pet's com idade igual a: "))
        if not idade:
            print("ERRO! Campo não pode estar vazio.")
        else:
            break
    
    sql = f"SELECT * FROM petshop WHERE {tipo_dado} = {idade}"
    
    inst_consulta.execute(sql)
    dados = inst_consulta.fetchall()
    os.system('cls')
    if dados:
        dados_df = pd.DataFrame(dados, columns=["Id", "Tipo", "Nome", "Idade", "Data de Nascimento", "Data de Cadastro"])
        print(dados_df)
    else:
        print(f"Não conseguimos encontrar nenhum pet com idade igual a {idade} anos.\n")
        
        

def maior_que():
    os.system('cls')
    print("== Filtragem: idade do PET (maior que) ==")
    while True:
        idade = int(input("\nBuscar Pet's com idade maior que: "))
        if not idade:
            print("ERRO! Campo não pode estar vazio.")
        else:
            break
    
    sql = f"SELECT * FROM petshop WHERE idade > {idade}"
    
    inst_consulta.execute(sql)
    dados = inst_consulta.fetchall()
    os.system('cls')
    if dados:
        dados_df = pd.DataFrame(dados, columns=["Id", "Tipo", "Nome", "Idade", "Data de Nascimento", "Data de Cadastro"])
        print(dados_df)
    else:
        print(f"Não conseguimos encontrar nenhum pet com idade maior que {idade} anos.\n")

def menor_que():
    os.system('cls')
    print("== Filtragem: idade do PET (menor que) ==")
    while True:
        idade = int(input("\nBuscar Pet's com idade menor que: "))
        if not idade:
            print("ERRO! Campo não pode estar vazio.")
        else:
            break
    
    sql = f"SELECT * FROM petshop WHERE idade < {idade}"
    
    inst_consulta.execute(sql)
    dados = inst_consulta.fetchall()
    os.system('cls')
    if dados:
        dados_df = pd.DataFrame(dados, columns=["Id", "Tipo", "Nome", "Idade", "Data de Nascimento", "Data de Cadastro"])
        print(dados_df)
    else:
        print(f"Não conseguimos encontrar nenhum pet com idade menor que {idade} anos.\n")
        

def number_entre(tipo_dado:any):
    os.system('cls')
    print("== Filtragem: {tipo_dado} do PET (entre) ==")
    while True:
        print("Buscar Pet's com idade entre: ")
        idade1 = int(input("Idade 1: "))
        idade2 = int(input("Idade 2: "))
        if not idade1 or not idade2:
            print("ERRO! Campo não pode estar vazio.")
        else:
            if idade1 > idade2:
                aux = idade1
                idade1 = idade2
                idade2 = aux
            break
    
    sql = f"SELECT * FROM petshop WHERE idade BETWEEN {idade1} AND {idade2}"
    
    inst_consulta.execute(sql)
    dados = inst_consulta.fetchall()
    os.system('cls')
    if dados:
        dados_df = pd.DataFrame(dados, columns=["Id", "Tipo", "Nome", "Idade", "Data de Nascimento", "Data de Cadastro"])
        print(dados_df)
    else:
        print(f"Não conseguimos encontrar nenhum pet com idade entre {idade1} a {idade2} anos.\n")


"""
Procedimento: Recebe a opção de filtro escolhida pelo usuário e executa a função correspondente
Opções: (1 – Igual / 2 – Maior que / 3 – Menor que / 4 – Entre)
Retorno: None
"""
def filtra_number(op: int, tipo_dado:str):
    match op:
        case 1:
            number_igual(tipo_dado)
        case 2:
            maior_que(tipo_dado)
        case 3:
            menor_que(tipo_dado)
        case 4:
            number_entre(tipo_dado)

"""
Procedimento: Exibe o menu da filtragem da String
Retorno: None
"""
def exibe_sub_menu_string() -> None:
    print("""
1 - Começa com: 
2 - Termina com: 
3 - Tem no nome: 
4 - Começa com 'x' e tem um número mínimo de caracteres. \n    EX: (M____ -> Começa com M e têm 4 caracteres após)
""")

"""
Procedimento: Filtra os registros da tabela `petshop` pelo começo do nome do pet e exibe os resultados.
Parâmetro 1: start: str -> string que representa o inicio do nome do pet para filtragem
Retorno: None
"""
def comeca_por_filtro(start: str) -> None:
    consulta = f"SELECT * FROM petshop WHERE nome_pet LIKE '{start}%' "
    inst_consulta.execute(consulta)
    data = inst_consulta.fetchall()

    dados_df = pd.DataFrame.from_records(data, columns=['ID', 'Tipo', 'Nome', 'Idade', 'Data de Nascimento'], index="ID")

    exibir_e_gerar_planilha(dados_df)

"""
Procedimento: Filtra os registros da tabela `petshop` pelo final do nome do pet e exibe os resultados.
Parâmetro 1: end: str -> string que representa o final do nome do pet para filtragem
Retorno: None
"""
def termina_com_filtro(end: str) -> None:
    consulta = f"SELECT * FROM petshop WHERE nome_pet LIKE '%{end}' "
    inst_consulta.execute(consulta)
    data = inst_consulta.fetchall()

    dados_df = pd.DataFrame.from_records(data, columns=['ID', 'Tipo', 'Nome', 'Idade', 'Data de Nascimento'], index="ID")

    exibir_e_gerar_planilha(dados_df)

"""
Procedimento: Filtra os registros da tabela `petshop` por uma parte do nome do pet e exibe os resultados.
Parâmetro 1: word: str -> string que representa a parte do nome do pet para filtragem. (Seja essa parte no meio, final ou começo)
Retorno: None
"""
def tem_nome_filtro(word: str) -> None:
    consulta = f"SELECT * FROM petshop WHERE nome_pet LIKE '%{word}%' "
    inst_consulta.execute(consulta)
    data = inst_consulta.fetchall()
    dados_df = pd.DataFrame.from_records(data, columns=['ID', 'Tipo', 'Nome', 'Idade', 'Data de Nascimento'], index="ID")

    exibir_e_gerar_planilha(dados_df)

"""
Procedimento: Filtra os registros da tabela `petshop` com base no início do nome do pet e em um número mínimo de caracteres após o início.
Parâmetro 1: start: str -> String que representa o início do nome do pet para a filtragem.
Parâmetro 2: min_chars: int -> Número mínimo de caracteres adicionais após o início especificado.
Retorno: None
"""
def comeca_com_e_min_caracteres(start: str, min_chars: int) -> None:
    like = f"{start}" + "_" * min_chars + "%"

    consulta = f"SELECT * FROM petshop WHERE nome_pet LIKE '{like}' "
    inst_consulta.execute(consulta)
    data = inst_consulta.fetchall()

    dados_df = pd.DataFrame.from_records(data, columns=['ID', 'Tipo', 'Nome', 'Idade', 'Data de Nascimento'], index="ID")

    exibir_e_gerar_planilha(dados_df)
        
"""
Procedimento: Realiza diferentes tipos de filtragem na tabela `petshop` com base na opção de filtragem escolhida pelo usuário.
Parâmetro 1: O número da opção de filtragem que o usuário escolhe
Retorno: None
"""
def filtra_string(op: int) -> None:
    os.system("cls")
    match op:
        case 1:
            print("== Filtrando pelo começo do nome do pet ==\n")
            comeco = input("Você quer que sua pesquisa comece com: ")
            print("\n Resultados da sua pesquisa: ")
            comeca_por_filtro(comeco)
        case 2:
            print("== Filtrando pelo final do nome do pet ==\n")
            fim = input("Você quer que esse nome termine com: ")
            termina_com_filtro(fim)
        case 3: 
            print("== Filtrando por um caracetere/conjunto de caracteres no nome do pet ==\n")
            tem = input("Você quer que esse nome tenha: ")
            tem_nome_filtro(tem)
        case 4: 
            print("== Filtrando pelo começo com um número mínimo de caracteres ==\n")
            comeco = input("Você quer que sua pesquisa comece com: ")
            minimo = int(input("Qual o mínimo de caracteres após o começo? "))
            comeca_com_e_min_caracteres(comeco, minimo)    



# -- ROTINA PRINCIPAL
    
os.system('cls')
while conexao:
    print("""
== Bem-vindo(a) ao sistema do petshop == 
          
MENU:
------          
0 - Sair
1 - Cadastrar
2 - Listar todos registros
3 - Filtrar colunas          
4 - Filtrar registros (linhas)
""")
    # inst_consulta.execute("SELECT COLUMN_NAME FROM ALL_TAB_COLUMNS WHERE TABLE_NAME = 'PETSHOP'")
    # print(inst_consulta.fetchall())
    escolha = int(input("Escolha: "))
    match escolha:
        case 0:
            print("\nFinalizando...")
            conexao = False
        case 1:
            tipo = input("Tipo...: ")
            nome = input("Nome...: ")
            idade = int(input("Idade...: "))
            data_nasc = {
                'dia' : int(input("Dia de nascimento...: ")),
                'mes' : int(input("Mês de nascimento...: ")),
                'ano' : (ano_atual - idade)
            }

            data_atual = data_atual.strftime("%d/%m/%Y")
            
            cadastro = f"""INSERT INTO petshop (tipo_pet, nome_pet, idade, data_nasc) VALUES ('{tipo}', '{nome}', '{idade}', TO_DATE('{data_nasc['dia']}/{data_nasc['mes']}/{data_nasc['ano']}', 'DD/MM/YYYY'))"""
            
            inst_cadastro.execute(cadastro)
            conn.commit()
            print("Dados gravados!")
        case 2:
            listar_dados = []
            inst_consulta.execute("SELECT * FROM petshop")
            data = inst_consulta.fetchall()
            
            for dt in data:
                listar_dados.append(dt)
            
            listar_dados = sorted(listar_dados)
            
            dados_df = cria_dataframe_todas_colunas()
            
            if dados_df.empty:
                os.system('cls')
                print("Não há pets cadastrados!")
            else:
                # lista os dados 
                print(dados_df)
                
                gerar_planilha = input("Gerar Planilha? [S]im ou [N]ão: ").lower()
                if gerar_planilha == "s":
                    nome_arquivo = "planilha" + dia_hora
                    dados_df.to_excel(nome_arquivo+".xlsx", index=False)
                    print('Dados')
                else:
                    print("Não queria exportar mesmo...")
        case 3:

            colunas_exibir = []

            while True:
                os.system("cls")
                print("=== Escolha as Colunas a Exibir ===")
                print("""
1 - Id
2 - Tipo de Pet
3 - Nome
4 - Idade
5 - Data de Nascimento
6 - Todas
7 - Finalizar
                """)
                
                escolha_coluna = input("Escolha: ")

                if escolha_coluna == '7':
                    break
                
                if escolha_coluna == '6': 
                    colunas_exibir = ['Id', 'Tipo', 'Nome', 'Idade', 'Data Nascimento']
                    print("Todas as colunas adicionadas.")
                    break
                
                match escolha_coluna:
                    case '1':
                        colunas_exibir.append('Id')
                        print("Coluna 'Id' adicionada.")
                    case '2':
                        colunas_exibir.append('Tipo')
                        print("Coluna 'Tipo' adicionada.")
                    case '3':
                        colunas_exibir.append('Nome')
                        print("Coluna 'Nome' adicionada.")
                    case '4':
                        colunas_exibir.append('Idade')
                        print("Coluna 'Idade' adicionada.")
                    case '5':
                        colunas_exibir.append('Data Nascimento')
                        print("Coluna 'Data de Nascimento' adicionada.")
                    case _:
                        print(f"Opção '{escolha_coluna}' inválida.")
                input("\nPressione enter para adicionar mais colunas... ")
                
            dados_df = cria_dataframe_todas_colunas()
            if colunas_exibir and not dados_df.empty: # Se tiver colunas nas lista e `DataFrame` não está vazio
                dados_filtrados = dados_df[colunas_exibir]
                print("\n=== Registros Filtrados ===\n")
                print(dados_filtrados)
            input("\nPressione enter para continuar... ")

        case 4:
            os.system("cls")
            print(" == Escolha por qual coluna você quer filtrar: ==")
            exibe_sub_menu_filtro()
            escolha = int(input("Escolha: "))
            
            match escolha:
                case 1:
                    os.system("cls")
                    print(" == Filtragem: nome do PET == ")
                    exibe_sub_menu_string()
                    opcao = int(input("\nEscolha: "))
                    if opcao > 4 or opcao < 1:
                        print("\nNão existe essa opção no menu!")
                    else:
                        filtra_string(opcao)
                case 2:
                    os.system('cls')
                    print(" == Filtragem: idade do PET == ")
                    exibe_sub_menu_number()
                    opcao = int(input("\nEscolha: "))
                    if  0 > opcao > 4:
                        print("\nNão existe esta opção no menu!")
                    else:
                        filtra_number(opcao, "idade")
                case 3:
                    os.system('cls')
                    print(" == Filtragem: Data de nascimento == ")
                    exibe_sub_menu_number()
                    opcao = int(input("\nEscolha: "))
                    if  0 > opcao > 4:
                        print("\nNão existe esta opção no menu!")
                    else:
                        filtra_number(opcao, "data_nasc")
                        
            input("Pressione enter para continuar ...")
            os.system("cls")